{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/Users/kabash/Documents/shop-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useState}from'react';import{FormDiv,Button,Input,PasswordChecks,Check}from'./styledElements';import{toastConfig}from'./styledElements';import{toast,ToastContainer}from'react-toastify';import{CheckSquare,XCircle}from'react-feather';function PasswordUpdate(_ref){var user=_ref.user,updatePassword=_ref.updatePassword;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),currentPassword=_useState2[0],setCurrentPassword=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),newPassword=_useState4[0],setNewPassword=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),confirmPassword=_useState6[0],setConfirmPassword=_useState6[1];var passwordsMatch=newPassword===confirmPassword;var handlePasswordUpdate=function handlePasswordUpdate(e){e.preventDefault();if(confirmPassword!==newPassword){return toast.error('Passwords do not match',toastConfig);}var params={password:user.password,newPassword:newPassword,currentPassword:currentPassword};updatePassword(e,params);};var characterCountRegex=/.{8,}/;var uppercaseRegex=/(?=.*?[A-Z])/;var specialCharacterRegex=/(?=.*?[#?!@$%^&*-])/;var digitRegex=/(?=.*?[0-9])/;var passwordRegex=/^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;return/*#__PURE__*/_jsxs(FormDiv,{style:{width:'340px'},children:[/*#__PURE__*/_jsx(ToastContainer,{}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handlePasswordUpdate,className:\"password-update\",children:[/*#__PURE__*/_jsx(Input,{value:currentPassword,type:\"password\",name:\"currentPassword\",id:\"currentPassword\",placeholder:\"Enter current password\",onChange:function onChange(e){return setCurrentPassword(e.target.value);},required:true}),/*#__PURE__*/_jsx(Input,{value:newPassword,type:\"password\",name:\"newPassword\",id:\"newPassword\",placeholder:\"Enter new password\",onChange:function onChange(e){return setNewPassword(e.target.value);},required:true}),newPassword&&/*#__PURE__*/_jsxs(PasswordChecks,{children:[/*#__PURE__*/_jsxs(Check,{children:[characterCountRegex.test(newPassword)?/*#__PURE__*/_jsx(CheckSquare,{size:20,style:{marginRight:'0.5rem',color:'green'}}):/*#__PURE__*/_jsx(XCircle,{size:20,style:{marginRight:'0.5rem',color:'red'}}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'14px'},children:\"Password must contain atleast 8 characters\"})]}),/*#__PURE__*/_jsxs(Check,{children:[uppercaseRegex.test(newPassword)?/*#__PURE__*/_jsx(CheckSquare,{size:20,style:{marginRight:'0.5rem',color:'green'}}):/*#__PURE__*/_jsx(XCircle,{size:20,style:{marginRight:'0.5rem',color:'red'}}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'14px'},children:\"Password must contain atleast one uppercase\"})]}),/*#__PURE__*/_jsxs(Check,{children:[digitRegex.test(newPassword)?/*#__PURE__*/_jsx(CheckSquare,{size:20,style:{marginRight:'0.5rem',color:'green'}}):/*#__PURE__*/_jsx(XCircle,{size:20,style:{marginRight:'0.5rem',color:'red'}}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'14px'},children:\"Password must contain atleast one digit\"})]}),/*#__PURE__*/_jsxs(Check,{children:[specialCharacterRegex.test(newPassword)?/*#__PURE__*/_jsx(CheckSquare,{size:20,style:{marginRight:'0.5rem',color:'green'}}):/*#__PURE__*/_jsx(XCircle,{size:20,style:{marginRight:'0.5rem',color:'red'}}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'14px'},children:\"Password must contain atleast one special character\"})]})]}),/*#__PURE__*/_jsx(Input,{value:confirmPassword,type:\"password\",name:\"confirmPassword\",id:\"confirmPassword\",placeholder:\"Reenter new password\",onChange:function onChange(e){return setConfirmPassword(e.target.value);},required:true}),confirmPassword&&/*#__PURE__*/_jsx(PasswordChecks,{style:{height:'auto'},children:/*#__PURE__*/_jsxs(Check,{children:[passwordsMatch?/*#__PURE__*/_jsx(CheckSquare,{size:20,style:{marginRight:'0.5rem',color:'green'}}):/*#__PURE__*/_jsx(XCircle,{size:20,style:{marginRight:'0.5rem',color:'red'}}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'14px'},children:passwordsMatch?'Passwords match':'Passwords do not match'})]})}),/*#__PURE__*/_jsx(Button,{disabled:!passwordsMatch||!passwordRegex.test(newPassword),type:\"submit\",style:{width:'180px'},children:\"Update Password\"})]})]});}export default PasswordUpdate;","map":{"version":3,"sources":["/Users/kabash/Documents/shop-frontend/src/components/PasswordUpdate.js"],"names":["React","useRef","useState","FormDiv","Button","Input","PasswordChecks","Check","toastConfig","toast","ToastContainer","CheckSquare","XCircle","PasswordUpdate","user","updatePassword","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","passwordsMatch","handlePasswordUpdate","e","preventDefault","error","params","password","characterCountRegex","uppercaseRegex","specialCharacterRegex","digitRegex","passwordRegex","width","target","value","test","marginRight","color","fontSize","height"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\nimport {FormDiv, Button, Input, PasswordChecks, Check} from './styledElements';\nimport { toastConfig } from './styledElements'; \nimport { toast, ToastContainer } from 'react-toastify';\nimport { CheckSquare, XCircle } from 'react-feather';\n\nfunction PasswordUpdate({user, updatePassword}) {\n\n    const [ currentPassword, setCurrentPassword ] = useState('');\n    const [ newPassword, setNewPassword ] = useState('');\n    const [ confirmPassword, setConfirmPassword ] = useState('');\n\n    const passwordsMatch = newPassword === confirmPassword;\n\n    const handlePasswordUpdate = e => {\n        e.preventDefault();\n        if(confirmPassword !== newPassword) {\n            return toast.error('Passwords do not match', toastConfig);\n        }\n        const params = {\n            password: user.password, \n            newPassword, \n            currentPassword\n        };\n        updatePassword(e, params);\n\n    }\n\n    const characterCountRegex = /.{8,}/;\n    const uppercaseRegex = /(?=.*?[A-Z])/;\n    const specialCharacterRegex = /(?=.*?[#?!@$%^&*-])/;\n    const digitRegex = /(?=.*?[0-9])/;\n\n    const passwordRegex = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/\n\n    return (\n        <FormDiv style={{width: '340px'}}>\n            <ToastContainer/>\n            <form onSubmit={handlePasswordUpdate} className=\"password-update\">\n            <Input \n            value={currentPassword}\n            type='password' \n            name='currentPassword' \n            id='currentPassword' \n            placeholder='Enter current password' \n            onChange={(e) => setCurrentPassword(e.target.value)}\n            required/>\n            <Input \n            value={newPassword} \n            type='password' \n            name='newPassword' \n            id='newPassword' \n            placeholder='Enter new password' \n            onChange={(e) => setNewPassword(e.target.value)}\n            required/>\n            {newPassword && \n                <PasswordChecks>\n                    <Check>\n                        {characterCountRegex.test(newPassword) ? <CheckSquare size={20} style={{marginRight: '0.5rem', color: 'green'}}/>\n                        : <XCircle size={20} style={{marginRight: '0.5rem', color: 'red'}}/>}\n                        <span style={{fontSize: '14px'}}>Password must contain atleast 8 characters</span>\n                    </Check>\n                    <Check>\n                        {uppercaseRegex.test(newPassword) ? <CheckSquare size={20} style={{marginRight: '0.5rem', color: 'green'}}/>\n                        : <XCircle size={20} style={{marginRight: '0.5rem', color: 'red'}}/>}\n                        <span style={{fontSize: '14px'}}>Password must contain atleast one uppercase</span>\n                    </Check>\n                    <Check>\n                        {digitRegex.test(newPassword) ? <CheckSquare size={20} style={{marginRight: '0.5rem', color: 'green'}}/>\n                        : <XCircle size={20} style={{marginRight: '0.5rem', color: 'red'}}/>}\n                        <span style={{fontSize: '14px'}}>Password must contain atleast one digit</span>\n                    </Check>\n                    <Check>\n                        {specialCharacterRegex.test(newPassword) ? <CheckSquare size={20} style={{marginRight: '0.5rem', color: 'green'}}/>\n                        : <XCircle size={20} style={{marginRight: '0.5rem', color: 'red'}}/>}\n                        <span style={{fontSize: '14px'}}>Password must contain atleast one special character</span>\n                    </Check>\n                </PasswordChecks>}\n            <Input \n            value={confirmPassword} \n            type='password' \n            name='confirmPassword' \n            id='confirmPassword' \n            placeholder='Reenter new password' \n            onChange={(e) => setConfirmPassword(e.target.value)}\n            required/>\n            {confirmPassword && \n                <PasswordChecks style={{height: 'auto'}}>\n                    <Check>\n                        {passwordsMatch ? <CheckSquare size={20} style={{marginRight: '0.5rem', color: 'green'}}/>\n                        : <XCircle size={20} style={{marginRight: '0.5rem', color: 'red'}}/>}\n                        <span style={{fontSize: '14px'}}>{passwordsMatch ? 'Passwords match' : 'Passwords do not match'}</span>\n                    </Check>    \n                </PasswordChecks>}\n            <Button disabled={!passwordsMatch || !passwordRegex.test(newPassword)} type='submit' style={{width: '180px'}} >Update Password</Button>\n            </form>\n        </FormDiv>\n    )\n}\n\nexport default PasswordUpdate;"]},"metadata":{},"sourceType":"module"}