{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport { BASE_URL } from './constants';\nconst shopApiInstance = axios.create({\n  baseURL: BASE_URL\n});\nshopApiInstance.interceptors.response.use(response => {\n  let newAccessToken;\n  const currentToken = shopApiInstance.defaults.headers.common['Authorization'] && shopApiInstance.defaults.headers.common['Authorization'].split(' ')[1];\n\n  if (currentToken) {\n    const currentDecodedToken = jwt_decode(currentToken);\n    const {\n      exp\n    } = currentDecodedToken;\n\n    if (exp * 1000 < Date.now()) {\n      console.log('token expired');\n\n      if (response.headers['shop-refreshed-access-token']) {\n        newAccessToken = response.headers['shop-refreshed-access-token'];\n        setBearerToken(newAccessToken);\n        localStorage.setItem('token', newAccessToken);\n        console.info('access token renewed');\n      }\n    } else {\n      console.info('token still good');\n    }\n  }\n\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\nconst setBearerToken = token => {\n  shopApiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  console.log(`Set bearer token, ${token}`);\n};\n\nexport { shopApiInstance, setBearerToken };","map":{"version":3,"sources":["/Users/kabash/Documents/shop-frontend/src/network.js"],"names":["axios","jwt_decode","BASE_URL","shopApiInstance","create","baseURL","interceptors","response","use","newAccessToken","currentToken","defaults","headers","common","split","currentDecodedToken","exp","Date","now","console","log","setBearerToken","localStorage","setItem","info","error","Promise","reject","token"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA,MAAMC,eAAe,GAAGH,KAAK,CAACI,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAEH;AADwB,CAAb,CAAxB;AAKAC,eAAe,CAACG,YAAhB,CAA6BC,QAA7B,CAAsCC,GAAtC,CACID,QAAQ,IAAI;AACZ,MAAIE,cAAJ;AACA,QAAMC,YAAY,GAAGP,eAAe,CAACQ,QAAhB,CAAyBC,OAAzB,CAAiCC,MAAjC,CAAwC,eAAxC,KAA4DV,eAAe,CAACQ,QAAhB,CAAyBC,OAAzB,CAAiCC,MAAjC,CAAwC,eAAxC,EAAyDC,KAAzD,CAA+D,GAA/D,EAAoE,CAApE,CAAjF;;AACA,MAAIJ,YAAJ,EAAkB;AACd,UAAMK,mBAAmB,GAAGd,UAAU,CAACS,YAAD,CAAtC;AACA,UAAM;AAACM,MAAAA;AAAD,QAAQD,mBAAd;;AACA,QAAIC,GAAG,GAAG,IAAN,GAAaC,IAAI,CAACC,GAAL,EAAjB,EAA6B;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AACA,UAAIb,QAAQ,CAACK,OAAT,CAAiB,6BAAjB,CAAJ,EAAoD;AAChDH,QAAAA,cAAc,GAAGF,QAAQ,CAACK,OAAT,CAAiB,6BAAjB,CAAjB;AACAS,QAAAA,cAAc,CAACZ,cAAD,CAAd;AACAa,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8Bd,cAA9B;AACAU,QAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACH;AACJ,KARD,MAQO;AACHL,MAAAA,OAAO,CAACK,IAAR,CAAa,kBAAb;AACH;AACJ;;AAED,SAAOjB,QAAP;AACD,CArBH,EAsBEkB,KAAK,IAAI;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAxBH;;AA0BA,MAAMJ,cAAc,GAAGO,KAAK,IAAI;AAC5BzB,EAAAA,eAAe,CAACQ,QAAhB,CAAyBC,OAAzB,CAAiCC,MAAjC,CAAwC,eAAxC,IAA4D,UAASe,KAAM,EAA3E;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAa,qBAAoBQ,KAAM,EAAvC;AACH,CAHD;;AAKA,SAAQzB,eAAR,EAAyBkB,cAAzB","sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport {BASE_URL} from './constants';\n\nconst shopApiInstance = axios.create({\n    baseURL: BASE_URL\n\n});\n\nshopApiInstance.interceptors.response.use(\n    response => {\n    let newAccessToken;\n    const currentToken = shopApiInstance.defaults.headers.common['Authorization'] && shopApiInstance.defaults.headers.common['Authorization'].split(' ')[1];\n    if (currentToken) {\n        const currentDecodedToken = jwt_decode(currentToken);\n        const {exp} = currentDecodedToken;\n        if (exp * 1000 < Date.now()) {\n            console.log('token expired')\n            if (response.headers['shop-refreshed-access-token']){\n                newAccessToken = response.headers['shop-refreshed-access-token']\n                setBearerToken(newAccessToken);\n                localStorage.setItem('token', newAccessToken);\n                console.info('access token renewed')\n            }\n        } else {\n            console.info('token still good')\n        }\n    }\n    \n    return response;\n  }, \n  error => {\n    return Promise.reject(error);\n  });\n\nconst setBearerToken = token => {\n    shopApiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    console.log(`Set bearer token, ${token}`);\n}\n\nexport {shopApiInstance, setBearerToken};\n"]},"metadata":{},"sourceType":"module"}