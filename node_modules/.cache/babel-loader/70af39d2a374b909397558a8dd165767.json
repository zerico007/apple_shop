{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nconst shopApiInstance = axios.create({\n  baseURL: window.env.SHOP_REST_API_BASE_URL\n});\nshopApiInstance.interceptors.response.use(response => {\n  let newAccessToken;\n  const currentToken = shopApiInstance.defaults.headers.common['Authorization'] && shopApiInstance.defaults.headers.common['Authorization'].split(' ')[1];\n  const currentDecodedToken = currentToken && jwt_decode(currentToken);\n  const {\n    exp\n  } = currentDecodedToken;\n\n  if (exp * 1000 < Date.now()) {\n    console.log('token expired');\n\n    if (response.headers['shop-refreshed-access-token']) {\n      newAccessToken = response.headers['shop-refreshed-access-token'];\n      setBearerToken(newAccessToken);\n      console.info('access token renewed');\n    }\n  } else {\n    console.info('token still good');\n  }\n\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\nconst setBearerToken = token => {\n  shopApiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  console.log(`Set bearer token, ${token}`);\n};\n\nconst isUserExpired = exp => {\n  if (exp * 1000 < Date.now()) {\n    console.warn('token expired'); //tokenCheckInterceptor();\n  }\n};\n\nexport { shopApiInstance, setBearerToken, isUserExpired };","map":{"version":3,"sources":["/Users/kabash/Documents/shop-frontend/src/network.js"],"names":["axios","jwt_decode","shopApiInstance","create","baseURL","window","env","SHOP_REST_API_BASE_URL","interceptors","response","use","newAccessToken","currentToken","defaults","headers","common","split","currentDecodedToken","exp","Date","now","console","log","setBearerToken","info","error","Promise","reject","token","isUserExpired","warn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,MAAMC,eAAe,GAAGF,KAAK,CAACG,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAEC,MAAM,CAACC,GAAP,CAAWC;AADa,CAAb,CAAxB;AAKAL,eAAe,CAACM,YAAhB,CAA6BC,QAA7B,CAAsCC,GAAtC,CACID,QAAQ,IAAI;AACZ,MAAIE,cAAJ;AACA,QAAMC,YAAY,GAAGV,eAAe,CAACW,QAAhB,CAAyBC,OAAzB,CAAiCC,MAAjC,CAAwC,eAAxC,KAA4Db,eAAe,CAACW,QAAhB,CAAyBC,OAAzB,CAAiCC,MAAjC,CAAwC,eAAxC,EAAyDC,KAAzD,CAA+D,GAA/D,EAAoE,CAApE,CAAjF;AAEA,QAAMC,mBAAmB,GAAGL,YAAY,IAAIX,UAAU,CAACW,YAAD,CAAtD;AACA,QAAM;AAACM,IAAAA;AAAD,MAAQD,mBAAd;;AACA,MAAIC,GAAG,GAAG,IAAN,GAAaC,IAAI,CAACC,GAAL,EAAjB,EAA6B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AACA,QAAIb,QAAQ,CAACK,OAAT,CAAiB,6BAAjB,CAAJ,EAAoD;AAChDH,MAAAA,cAAc,GAAGF,QAAQ,CAACK,OAAT,CAAiB,6BAAjB,CAAjB;AACAS,MAAAA,cAAc,CAACZ,cAAD,CAAd;AACAU,MAAAA,OAAO,CAACG,IAAR,CAAa,sBAAb;AACH;AACJ,GAPD,MAOO;AACHH,IAAAA,OAAO,CAACG,IAAR,CAAa,kBAAb;AACH;;AAED,SAAOf,QAAP;AACD,CAnBH,EAoBEgB,KAAK,IAAI;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAtBH;;AAwBA,MAAMF,cAAc,GAAGK,KAAK,IAAI;AAC5B1B,EAAAA,eAAe,CAACW,QAAhB,CAAyBC,OAAzB,CAAiCC,MAAjC,CAAwC,eAAxC,IAA4D,UAASa,KAAM,EAA3E;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAa,qBAAoBM,KAAM,EAAvC;AACH,CAHD;;AAKA,MAAMC,aAAa,GAAGX,GAAG,IAAI;AACzB,MAAIA,GAAG,GAAG,IAAN,GAAaC,IAAI,CAACC,GAAL,EAAjB,EAA6B;AACzBC,IAAAA,OAAO,CAACS,IAAR,CAAa,eAAb,EADyB,CAEzB;AACH;AACJ,CALD;;AAOA,SAAQ5B,eAAR,EAAyBqB,cAAzB,EAAyCM,aAAzC","sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst shopApiInstance = axios.create({\n    baseURL: window.env.SHOP_REST_API_BASE_URL\n\n});\n\nshopApiInstance.interceptors.response.use(\n    response => {\n    let newAccessToken;\n    const currentToken = shopApiInstance.defaults.headers.common['Authorization'] && shopApiInstance.defaults.headers.common['Authorization'].split(' ')[1];\n\n    const currentDecodedToken = currentToken && jwt_decode(currentToken);\n    const {exp} = currentDecodedToken;\n    if (exp * 1000 < Date.now()) {\n        console.log('token expired')\n        if (response.headers['shop-refreshed-access-token']){\n            newAccessToken = response.headers['shop-refreshed-access-token']\n            setBearerToken(newAccessToken);\n            console.info('access token renewed')\n        }\n    } else {\n        console.info('token still good')\n    }\n    \n    return response;\n  }, \n  error => {\n    return Promise.reject(error);\n  });\n\nconst setBearerToken = token => {\n    shopApiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    console.log(`Set bearer token, ${token}`);\n}\n\nconst isUserExpired = exp => {\n    if (exp * 1000 < Date.now()) {\n        console.warn('token expired')\n        //tokenCheckInterceptor();\n    }\n}\n\nexport {shopApiInstance, setBearerToken, isUserExpired};"]},"metadata":{},"sourceType":"module"}