{"ast":null,"code":"import axios from 'axios';\nconst shopApiInstance = axios.create({\n  baseURL: window.env.SHOP_REST_API_BASE_URL\n});\nshopApiInstance.interceptors.response.use(response => {\n  let newAccessToken;\n\n  if (response.headers['shop-refreshed-access-token']) {\n    newAccessToken = response.headers['shop-refreshed-access-token'];\n    setBearerToken(newAccessToken);\n    console.info('renewed access token');\n  }\n\n  console.log(shopApiInstance.defaults.headers.common['Authorization']);\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\nconst setBearerToken = token => {\n  shopApiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  console.log(`Set bearer token, ${token}`);\n};\n\nconst isUserExpired = exp => {\n  if (exp * 1000 < Date.now()) {\n    console.warn('token expired'); //tokenCheckInterceptor();\n  }\n};\n\nexport { shopApiInstance, setBearerToken, isUserExpired };","map":{"version":3,"sources":["/Users/kabash/Documents/shop-frontend/src/network.js"],"names":["axios","shopApiInstance","create","baseURL","window","env","SHOP_REST_API_BASE_URL","interceptors","response","use","newAccessToken","headers","setBearerToken","console","info","log","defaults","common","error","Promise","reject","token","isUserExpired","exp","Date","now","warn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAEC,MAAM,CAACC,GAAP,CAAWC;AADa,CAAb,CAAxB;AAKAL,eAAe,CAACM,YAAhB,CAA6BC,QAA7B,CAAsCC,GAAtC,CACID,QAAQ,IAAI;AACZ,MAAIE,cAAJ;;AACA,MAAIF,QAAQ,CAACG,OAAT,CAAiB,6BAAjB,CAAJ,EAAoD;AAChDD,IAAAA,cAAc,GAAGF,QAAQ,CAACG,OAAT,CAAiB,6BAAjB,CAAjB;AACAC,IAAAA,cAAc,CAACF,cAAD,CAAd;AACAG,IAAAA,OAAO,CAACC,IAAR,CAAa,sBAAb;AACH;;AACDD,EAAAA,OAAO,CAACE,GAAR,CAAYd,eAAe,CAACe,QAAhB,CAAyBL,OAAzB,CAAiCM,MAAjC,CAAwC,eAAxC,CAAZ;AACA,SAAOT,QAAP;AACD,CAVH,EAWEU,KAAK,IAAI;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAbH;;AAeA,MAAMN,cAAc,GAAGS,KAAK,IAAI;AAC5BpB,EAAAA,eAAe,CAACe,QAAhB,CAAyBL,OAAzB,CAAiCM,MAAjC,CAAwC,eAAxC,IAA4D,UAASI,KAAM,EAA3E;AACAR,EAAAA,OAAO,CAACE,GAAR,CAAa,qBAAoBM,KAAM,EAAvC;AACH,CAHD;;AAKA,MAAMC,aAAa,GAAGC,GAAG,IAAI;AACzB,MAAIA,GAAG,GAAG,IAAN,GAAaC,IAAI,CAACC,GAAL,EAAjB,EAA6B;AACzBZ,IAAAA,OAAO,CAACa,IAAR,CAAa,eAAb,EADyB,CAEzB;AACH;AACJ,CALD;;AAOA,SAAQzB,eAAR,EAAyBW,cAAzB,EAAyCU,aAAzC","sourcesContent":["import axios from 'axios';\n\nconst shopApiInstance = axios.create({\n    baseURL: window.env.SHOP_REST_API_BASE_URL\n\n});\n\nshopApiInstance.interceptors.response.use(\n    response => {\n    let newAccessToken;\n    if (response.headers['shop-refreshed-access-token']){\n        newAccessToken = response.headers['shop-refreshed-access-token']\n        setBearerToken(newAccessToken);\n        console.info('renewed access token')\n    }\n    console.log(shopApiInstance.defaults.headers.common['Authorization'])\n    return response;\n  }, \n  error => {\n    return Promise.reject(error);\n  });\n\nconst setBearerToken = token => {\n    shopApiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    console.log(`Set bearer token, ${token}`);\n}\n\nconst isUserExpired = exp => {\n    if (exp * 1000 < Date.now()) {\n        console.warn('token expired')\n        //tokenCheckInterceptor();\n    }\n}\n\nexport {shopApiInstance, setBearerToken, isUserExpired};"]},"metadata":{},"sourceType":"module"}