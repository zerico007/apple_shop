{"ast":null,"code":"import axios from'axios';import jwt_decode from'jwt-decode';var shopApiInstance=axios.create({baseURL:window.env.SHOP_REST_API_BASE_URL});shopApiInstance.interceptors.response.use(function(response){var newAccessToken;var currentToken=shopApiInstance.defaults.headers.common['Authorization']&&shopApiInstance.defaults.headers.common['Authorization'].split(' ')[1];if(currentToken){var currentDecodedToken=jwt_decode(currentToken);var exp=currentDecodedToken.exp;if(exp*1000<Date.now()){console.log('token expired');if(response.headers['shop-refreshed-access-token']){newAccessToken=response.headers['shop-refreshed-access-token'];setBearerToken(newAccessToken);localStorage.setItem('token',newAccessToken);console.info('access token renewed');}}else{console.info('token still good');}}return response;},function(error){return Promise.reject(error);});var setBearerToken=function setBearerToken(token){shopApiInstance.defaults.headers.common['Authorization']=\"Bearer \".concat(token);console.log(\"Set bearer token, \".concat(token));};export{shopApiInstance,setBearerToken};","map":{"version":3,"sources":["/Users/kabash/Documents/shop-frontend/src/network.js"],"names":["axios","jwt_decode","shopApiInstance","create","baseURL","window","env","SHOP_REST_API_BASE_URL","interceptors","response","use","newAccessToken","currentToken","defaults","headers","common","split","currentDecodedToken","exp","Date","now","console","log","setBearerToken","localStorage","setItem","info","error","Promise","reject","token"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CAEA,GAAMC,CAAAA,eAAe,CAAGF,KAAK,CAACG,MAAN,CAAa,CACjCC,OAAO,CAAEC,MAAM,CAACC,GAAP,CAAWC,sBADa,CAAb,CAAxB,CAKAL,eAAe,CAACM,YAAhB,CAA6BC,QAA7B,CAAsCC,GAAtC,CACI,SAAAD,QAAQ,CAAI,CACZ,GAAIE,CAAAA,cAAJ,CACA,GAAMC,CAAAA,YAAY,CAAGV,eAAe,CAACW,QAAhB,CAAyBC,OAAzB,CAAiCC,MAAjC,CAAwC,eAAxC,GAA4Db,eAAe,CAACW,QAAhB,CAAyBC,OAAzB,CAAiCC,MAAjC,CAAwC,eAAxC,EAAyDC,KAAzD,CAA+D,GAA/D,EAAoE,CAApE,CAAjF,CACA,GAAIJ,YAAJ,CAAkB,CACd,GAAMK,CAAAA,mBAAmB,CAAGhB,UAAU,CAACW,YAAD,CAAtC,CADc,GAEPM,CAAAA,GAFO,CAEAD,mBAFA,CAEPC,GAFO,CAGd,GAAIA,GAAG,CAAG,IAAN,CAAaC,IAAI,CAACC,GAAL,EAAjB,CAA6B,CACzBC,OAAO,CAACC,GAAR,CAAY,eAAZ,EACA,GAAIb,QAAQ,CAACK,OAAT,CAAiB,6BAAjB,CAAJ,CAAoD,CAChDH,cAAc,CAAGF,QAAQ,CAACK,OAAT,CAAiB,6BAAjB,CAAjB,CACAS,cAAc,CAACZ,cAAD,CAAd,CACAa,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8Bd,cAA9B,EACAU,OAAO,CAACK,IAAR,CAAa,sBAAb,EACH,CACJ,CARD,IAQO,CACHL,OAAO,CAACK,IAAR,CAAa,kBAAb,EACH,CACJ,CAED,MAAOjB,CAAAA,QAAP,CACD,CArBH,CAsBE,SAAAkB,KAAK,CAAI,CACP,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP,CACD,CAxBH,EA0BA,GAAMJ,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAO,KAAK,CAAI,CAC5B5B,eAAe,CAACW,QAAhB,CAAyBC,OAAzB,CAAiCC,MAAjC,CAAwC,eAAxC,mBAAqEe,KAArE,EACAT,OAAO,CAACC,GAAR,6BAAiCQ,KAAjC,GACH,CAHD,CAKA,OAAQ5B,eAAR,CAAyBqB,cAAzB","sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst shopApiInstance = axios.create({\n    baseURL: window.env.SHOP_REST_API_BASE_URL\n\n});\n\nshopApiInstance.interceptors.response.use(\n    response => {\n    let newAccessToken;\n    const currentToken = shopApiInstance.defaults.headers.common['Authorization'] && shopApiInstance.defaults.headers.common['Authorization'].split(' ')[1];\n    if (currentToken) {\n        const currentDecodedToken = jwt_decode(currentToken);\n        const {exp} = currentDecodedToken;\n        if (exp * 1000 < Date.now()) {\n            console.log('token expired')\n            if (response.headers['shop-refreshed-access-token']){\n                newAccessToken = response.headers['shop-refreshed-access-token']\n                setBearerToken(newAccessToken);\n                localStorage.setItem('token', newAccessToken);\n                console.info('access token renewed')\n            }\n        } else {\n            console.info('token still good')\n        }\n    }\n    \n    return response;\n  }, \n  error => {\n    return Promise.reject(error);\n  });\n\nconst setBearerToken = token => {\n    shopApiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    console.log(`Set bearer token, ${token}`);\n}\n\nexport {shopApiInstance, setBearerToken};"]},"metadata":{},"sourceType":"module"}