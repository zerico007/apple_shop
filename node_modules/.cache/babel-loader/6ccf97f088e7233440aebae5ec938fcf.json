{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kabash/Documents/shop-frontend/src/components/PasswordUpdate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { FormDiv, Button, Input, PasswordChecks, Check } from './styledElements';\nimport { toastConfig } from './styledElements';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { CheckSquare, XCircle } from 'react-feather';\n\nfunction PasswordUpdate({\n  user,\n  updatePassword\n}) {\n  _s();\n\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const passwordsMatch = newPassword === confirmPassword;\n\n  const handlePasswordUpdate = e => {\n    e.preventDefault();\n\n    if (confirmPassword !== newPassword) {\n      return toast.error('Passwords do not match', toastConfig);\n    }\n\n    const params = {\n      password: user.password,\n      newPassword,\n      currentPassword\n    };\n    updatePassword(e, params);\n  };\n\n  const characterCountRegex = /.{8,}/;\n  const uppercaseRegex = /(?=.*?[A-Z])/;\n  const specialCharacterRegex = /(?=.*?[#?!@$%^&*-])/;\n  const digitRegex = /(?=.*?[0-9])/;\n  const passwordRegex = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\n  return /*#__PURE__*/_jsxDEV(FormDiv, {\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handlePasswordUpdate,\n      className: \"password-update\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        value: currentPassword,\n        type: \"password\",\n        name: \"currentPassword\",\n        id: \"currentPassword\",\n        placeholder: \"Enter current password\",\n        onChange: e => setCurrentPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: newPassword,\n        type: \"password\",\n        name: \"newPassword\",\n        id: \"newPassword\",\n        placeholder: \"Enter new password\",\n        onChange: e => setNewPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), newPassword && /*#__PURE__*/_jsxDEV(PasswordChecks, {\n        children: [/*#__PURE__*/_jsxDEV(Check, {\n          children: [characterCountRegex.test(newPassword) ? /*#__PURE__*/_jsxDEV(CheckSquare, {\n            size: 20,\n            style: {\n              marginRight: '0.5rem',\n              color: 'green'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 66\n          }, this) : /*#__PURE__*/_jsxDEV(XCircle, {\n            size: 20,\n            style: {\n              marginRight: '0.5rem',\n              color: 'red'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '14px'\n            },\n            children: \"Password must contain atleast 8 characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Check, {\n          children: [uppercaseRegex.test(newPassword) ? /*#__PURE__*/_jsxDEV(CheckSquare, {\n            size: 20,\n            style: {\n              marginRight: '0.5rem',\n              color: 'green'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 61\n          }, this) : /*#__PURE__*/_jsxDEV(XCircle, {\n            size: 20,\n            style: {\n              marginRight: '0.5rem',\n              color: 'red'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '14px'\n            },\n            children: \"Password must contain atleast one uppercase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Check, {\n          children: [digitRegex.test(newPassword) ? /*#__PURE__*/_jsxDEV(CheckSquare, {\n            size: 20,\n            style: {\n              marginRight: '0.5rem',\n              color: 'green'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 57\n          }, this) : /*#__PURE__*/_jsxDEV(XCircle, {\n            size: 20,\n            style: {\n              marginRight: '0.5rem',\n              color: 'red'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '14px'\n            },\n            children: \"Password must contain atleast one digit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Check, {\n          children: [specialCharacterRegex.test(newPassword) ? /*#__PURE__*/_jsxDEV(CheckSquare, {\n            size: 20,\n            style: {\n              marginRight: '0.5rem',\n              color: 'green'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 68\n          }, this) : /*#__PURE__*/_jsxDEV(XCircle, {\n            size: 20,\n            style: {\n              marginRight: '0.5rem',\n              color: 'red'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '14px'\n            },\n            children: \"Password must contain atleast one special character\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: confirmPassword,\n        type: \"password\",\n        name: \"confirmPassword\",\n        id: \"confirmPassword\",\n        placeholder: \"Reenter new password\",\n        onChange: e => setConfirmPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), confirmPassword && /*#__PURE__*/_jsxDEV(PasswordChecks, {\n        style: {\n          height: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(Check, {\n          children: [passwordsMatch ? /*#__PURE__*/_jsxDEV(CheckSquare, {\n            size: 20,\n            style: {\n              marginRight: '0.5rem',\n              color: 'green'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 43\n          }, this) : /*#__PURE__*/_jsxDEV(XCircle, {\n            size: 20,\n            style: {\n              marginRight: '0.5rem',\n              color: 'red'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '14px'\n            },\n            children: passwordsMatch ? 'Passwords match' : 'Passwords do not match'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: !passwordsMatch || !passwordRegex.test(newPassword),\n        type: \"submit\",\n        style: {\n          width: '180px'\n        },\n        children: \"Update Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PasswordUpdate, \"Uh3hvULS/eg4CDDby9NHUxK6pEk=\");\n\n_c = PasswordUpdate;\nexport default PasswordUpdate;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordUpdate\");","map":{"version":3,"sources":["/Users/kabash/Documents/shop-frontend/src/components/PasswordUpdate.js"],"names":["React","useRef","useState","FormDiv","Button","Input","PasswordChecks","Check","toastConfig","toast","ToastContainer","CheckSquare","XCircle","PasswordUpdate","user","updatePassword","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","passwordsMatch","handlePasswordUpdate","e","preventDefault","error","params","password","characterCountRegex","uppercaseRegex","specialCharacterRegex","digitRegex","passwordRegex","target","value","test","marginRight","color","fontSize","height","width"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\nimport {FormDiv, Button, Input, PasswordChecks, Check} from './styledElements';\nimport { toastConfig } from './styledElements'; \nimport { toast, ToastContainer } from 'react-toastify';\nimport { CheckSquare, XCircle } from 'react-feather';\n\nfunction PasswordUpdate({user, updatePassword}) {\n\n    const [ currentPassword, setCurrentPassword ] = useState('');\n    const [ newPassword, setNewPassword ] = useState('');\n    const [ confirmPassword, setConfirmPassword ] = useState('');\n\n    const passwordsMatch = newPassword === confirmPassword;\n\n    const handlePasswordUpdate = e => {\n        e.preventDefault();\n        if(confirmPassword !== newPassword) {\n            return toast.error('Passwords do not match', toastConfig);\n        }\n        const params = {\n            password: user.password, \n            newPassword, \n            currentPassword\n        };\n        updatePassword(e, params);\n\n    }\n\n    const characterCountRegex = /.{8,}/;\n    const uppercaseRegex = /(?=.*?[A-Z])/;\n    const specialCharacterRegex = /(?=.*?[#?!@$%^&*-])/;\n    const digitRegex = /(?=.*?[0-9])/;\n\n    const passwordRegex = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/\n\n    return (\n        <FormDiv>\n            <ToastContainer/>\n            <form onSubmit={handlePasswordUpdate} className=\"password-update\">\n            <Input \n            value={currentPassword}\n            type='password' \n            name='currentPassword' \n            id='currentPassword' \n            placeholder='Enter current password' \n            onChange={(e) => setCurrentPassword(e.target.value)}\n            required/>\n            <Input \n            value={newPassword} \n            type='password' \n            name='newPassword' \n            id='newPassword' \n            placeholder='Enter new password' \n            onChange={(e) => setNewPassword(e.target.value)}\n            required/>\n            {newPassword && \n                <PasswordChecks>\n                    <Check>\n                        {characterCountRegex.test(newPassword) ? <CheckSquare size={20} style={{marginRight: '0.5rem', color: 'green'}}/>\n                        : <XCircle size={20} style={{marginRight: '0.5rem', color: 'red'}}/>}\n                        <span style={{fontSize: '14px'}}>Password must contain atleast 8 characters</span>\n                    </Check>\n                    <Check>\n                        {uppercaseRegex.test(newPassword) ? <CheckSquare size={20} style={{marginRight: '0.5rem', color: 'green'}}/>\n                        : <XCircle size={20} style={{marginRight: '0.5rem', color: 'red'}}/>}\n                        <span style={{fontSize: '14px'}}>Password must contain atleast one uppercase</span>\n                    </Check>\n                    <Check>\n                        {digitRegex.test(newPassword) ? <CheckSquare size={20} style={{marginRight: '0.5rem', color: 'green'}}/>\n                        : <XCircle size={20} style={{marginRight: '0.5rem', color: 'red'}}/>}\n                        <span style={{fontSize: '14px'}}>Password must contain atleast one digit</span>\n                    </Check>\n                    <Check>\n                        {specialCharacterRegex.test(newPassword) ? <CheckSquare size={20} style={{marginRight: '0.5rem', color: 'green'}}/>\n                        : <XCircle size={20} style={{marginRight: '0.5rem', color: 'red'}}/>}\n                        <span style={{fontSize: '14px'}}>Password must contain atleast one special character</span>\n                    </Check>\n                </PasswordChecks>}\n            <Input \n            value={confirmPassword} \n            type='password' \n            name='confirmPassword' \n            id='confirmPassword' \n            placeholder='Reenter new password' \n            onChange={(e) => setConfirmPassword(e.target.value)}\n            required/>\n            {confirmPassword && \n                <PasswordChecks style={{height: 'auto'}}>\n                    <Check>\n                        {passwordsMatch ? <CheckSquare size={20} style={{marginRight: '0.5rem', color: 'green'}}/>\n                        : <XCircle size={20} style={{marginRight: '0.5rem', color: 'red'}}/>}\n                        <span style={{fontSize: '14px'}}>{passwordsMatch ? 'Passwords match' : 'Passwords do not match'}</span>\n                    </Check>    \n                </PasswordChecks>}\n            <Button disabled={!passwordsMatch || !passwordRegex.test(newPassword)} type='submit' style={{width: '180px'}} >Update Password</Button>\n            </form>\n        </FormDiv>\n    )\n}\n\nexport default PasswordUpdate;"]},"metadata":{},"sourceType":"module"}