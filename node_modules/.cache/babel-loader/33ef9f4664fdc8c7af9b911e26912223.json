{"ast":null,"code":"import axios from 'axios';\nconst shopApiInstance = axios.create({\n  baseURL: window.env.SHOP_REST_API_BASE_URL\n});\n\nconst tokenCheckInterceptor = () => shopApiInstance.interceptors.response.use(response => {\n  console.log(response);\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\nconst setBearerToken = token => {\n  shopApiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  console.log(`Set bearer token, ${token}`);\n};\n\nconst isUserExpired = exp => {\n  if (exp * 1000 < Date.now()) {\n    console.warn('token expired');\n    tokenCheckInterceptor();\n  }\n};\n\nexport { shopApiInstance, setBearerToken, isUserExpired };","map":{"version":3,"sources":["/Users/kabash/Documents/shop-frontend/src/network.js"],"names":["axios","shopApiInstance","create","baseURL","window","env","SHOP_REST_API_BASE_URL","tokenCheckInterceptor","interceptors","response","use","console","log","error","Promise","reject","setBearerToken","token","defaults","headers","common","isUserExpired","exp","Date","now","warn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAEC,MAAM,CAACC,GAAP,CAAWC;AADa,CAAb,CAAxB;;AAKA,MAAMC,qBAAqB,GAAG,MAAMN,eAAe,CAACO,YAAhB,CAA6BC,QAA7B,CAAsCC,GAAtC,CAChCD,QAAQ,IAAI;AACZE,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,SAAOA,QAAP;AACD,CAJiC,EAKlCI,KAAK,IAAI;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAPiC,CAApC;;AASA,MAAMG,cAAc,GAAGC,KAAK,IAAI;AAC5BhB,EAAAA,eAAe,CAACiB,QAAhB,CAAyBC,OAAzB,CAAiCC,MAAjC,CAAwC,eAAxC,IAA4D,UAASH,KAAM,EAA3E;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAa,qBAAoBK,KAAM,EAAvC;AACH,CAHD;;AAKA,MAAMI,aAAa,GAAGC,GAAG,IAAI;AACzB,MAAIA,GAAG,GAAG,IAAN,GAAaC,IAAI,CAACC,GAAL,EAAjB,EAA6B;AACzBb,IAAAA,OAAO,CAACc,IAAR,CAAa,eAAb;AACAlB,IAAAA,qBAAqB;AACxB;AACJ,CALD;;AAOA,SAAQN,eAAR,EAAyBe,cAAzB,EAAyCK,aAAzC","sourcesContent":["import axios from 'axios';\n\nconst shopApiInstance = axios.create({\n    baseURL: window.env.SHOP_REST_API_BASE_URL\n\n});\n\nconst tokenCheckInterceptor = () => shopApiInstance.interceptors.response.use(\n    response => {\n    console.log(response)\n    return response;\n  }, \n  error => {\n    return Promise.reject(error);\n  });\n\nconst setBearerToken = token => {\n    shopApiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    console.log(`Set bearer token, ${token}`);\n}\n\nconst isUserExpired = exp => {\n    if (exp * 1000 < Date.now()) {\n        console.warn('token expired')\n        tokenCheckInterceptor();\n    }\n}\n\nexport {shopApiInstance, setBearerToken, isUserExpired};"]},"metadata":{},"sourceType":"module"}